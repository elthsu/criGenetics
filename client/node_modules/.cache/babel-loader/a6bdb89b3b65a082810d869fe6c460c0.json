{"ast":null,"code":"var _jsxFileName = \"/Users/eltonhsu/cri/challenge/client/src/createDataContext.js\";\n// Setups up CONTEXT, which is React Hooks version of app-wide state manager\nimport React, { useReducer } from 'react';\nexport default ((reducer, actions, defaultValue) => {\n  const Context = React.createContext();\n\n  const Provider = ({\n    children\n  }) => {\n    const [state, dispatch] = useReducer(reducer, defaultValue);\n    const boundActions = {};\n\n    for (let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return /*#__PURE__*/React.createElement(Context.Provider, {\n      value: {\n        state,\n        ...boundActions\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, children);\n  };\n\n  return {\n    Context,\n    Provider\n  };\n});","map":{"version":3,"sources":["/Users/eltonhsu/cri/challenge/client/src/createDataContext.js"],"names":["React","useReducer","reducer","actions","defaultValue","Context","createContext","Provider","children","state","dispatch","boundActions","key"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,gBAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,YAAnB,KAAoC;AACjD,QAAMC,OAAO,GAAGL,KAAK,CAACM,aAAN,EAAhB;;AAEA,QAAMC,QAAQ,GAAG,CAAE;AAACC,IAAAA;AAAD,GAAF,KAAiB;AAChC,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,OAAD,EAAUE,YAAV,CAApC;AAEA,UAAMO,YAAY,GAAG,EAArB;;AACA,SAAK,IAAIC,GAAT,IAAgBT,OAAhB,EAA0B;AACxBQ,MAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoBT,OAAO,CAACS,GAAD,CAAP,CAAaF,QAAb,CAApB;AACD;;AAED,wBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAF;AAAS,WAAGE;AAAZ,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,QADH,CADF;AAKD,GAbD;;AAcA,SAAO;AAAEH,IAAAA,OAAF;AAAWE,IAAAA;AAAX,GAAP;AACD,CAlBD","sourcesContent":["// Setups up CONTEXT, which is React Hooks version of app-wide state manager\n\nimport React, { useReducer } from 'react';\n\nexport default (reducer, actions, defaultValue) => {\n  const Context = React.createContext();\n\n  const Provider = ( {children}) => {\n    const [state, dispatch] = useReducer(reducer, defaultValue);\n\n    const boundActions = {};\n    for (let key in actions ) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return (\n      <Context.Provider value={{ state, ...boundActions }}>\n        {children}\n      </Context.Provider>\n    )\n  }\n  return { Context, Provider }\n}"]},"metadata":{},"sourceType":"module"}