{"ast":null,"code":"// Defines how we want our CONTEXT to be managed \nimport createDataContext from './createDataContext';\nimport axios from 'axios'; // Handles which function is being requested by our CONTEXT reducer\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"error\":\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case 'reload':\n      return {\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst reload = dispatch => async () => {\n  //sign up with the info above\n  try {\n    //if success - update the state and authenticated\n    axios.get(\"/getTrackers\").then(data => {\n      dispatch({\n        type: \"reload\",\n        payload: data.data\n      });\n    });\n  } catch (error) {\n    //if fail - show error\n    console.log(error);\n    dispatch({\n      type: \"error\",\n      payload: \"Something went wrong.\"\n    });\n  }\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(reducer, {\n  reload\n}, {\n  token: null,\n  errorMessage: ''\n});","map":{"version":3,"sources":["/Users/eltonhsu/cri/challenge/client/src/Context.js"],"names":["createDataContext","axios","reducer","state","action","type","errorMessage","payload","data","reload","dispatch","get","then","error","console","log","Provider","Context","token"],"mappings":"AAAA;AACA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAEC,KAAF,EAASC,MAAT,KAAqB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,YAAY,EAAEF,MAAM,CAACG;AAAjC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAACC,QAAAA,IAAI,EAAEJ,MAAM,CAACG;AAAd,OAAP;;AACF;AACE,aAAOJ,KAAP;AANJ;AAQD,CATD;;AAWA,MAAMM,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC;AACA,MAAI;AACF;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAU,cAAV,EAA0BC,IAA1B,CAA+BJ,IAAI,IAAE;AACnCE,MAAAA,QAAQ,CAAE;AAAEL,QAAAA,IAAI,EAAE,QAAR;AAAkBE,QAAAA,OAAO,EAAEC,IAAI,CAACA;AAAhC,OAAF,CAAR;AACD,KAFD;AAID,GAND,CAOA,OAAOK,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAH,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAE,OAAR;AAAiBE,MAAAA,OAAO,EAAE;AAA1B,KAAD,CAAR;AACD;AACF,CAdD;;AAgBA,OAAO,MAAM;AAAES,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAwBjB,iBAAiB,CACpDE,OADoD,EAEpD;AACEO,EAAAA;AADF,CAFoD,EAKpD;AAAES,EAAAA,KAAK,EAAE,IAAT;AAAeZ,EAAAA,YAAY,EAAE;AAA7B,CALoD,CAA/C","sourcesContent":["// Defines how we want our CONTEXT to be managed \nimport createDataContext from './createDataContext';\nimport axios from 'axios'\n\n// Handles which function is being requested by our CONTEXT reducer\nconst reducer = ( state, action ) => {\n  switch (action.type){\n    case \"error\":\n      return { ...state, errorMessage: action.payload };\n    case 'reload':\n      return {data: action.payload }\n    default:\n      return state;\n  }\n};\n\nconst reload = (dispatch) => async () => {\n  //sign up with the info above\n  try {\n    //if success - update the state and authenticated\n    axios.get(\"/getTrackers\").then(data=>{\n      dispatch( { type: \"reload\", payload: data.data} )\n    })\n    \n  }\n  catch (error) {\n    //if fail - show error\n    console.log(error)\n    dispatch({ type: \"error\", payload: \"Something went wrong.\"})\n  }\n}\n\nexport const { Provider, Context } = createDataContext (\n  reducer,\n  {\n    reload, \n  },\n  { token: null, errorMessage: '' }\n);\n\n\n\n"]},"metadata":{},"sourceType":"module"}